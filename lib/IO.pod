=begin pod

=TITLE class IO

   class IO::Path is Cool does IO::FileTestable { }

=head1 Methods

=head2 dir

    sub dir Cool $path = '.', Mu :$test = none('.', '..')

Returns a list if L<IO::File> and L<IO::Dir> objects for the
files and directories found in the $path. If $path is not given
in lists the entries in the current directory.

A second optional parameter can be given that will be
matched against the strings to filter our certain entries.
By default it filters out the '.' and  the '..'.

Examples:

    for dir() -> $file {
       say $file;
    }

    dir('path/to/directory');

To include all the entries (including . and ..) write:

    dir(test => all())

To include only the files with .pl extension write

    dir(test => /.pl$/)

=head2 prompt

Prints out a string to the standard output and waits
for the user to type in something and finish with an ENTER.
The types string without the trailing newline will be returned.

    my $name = prompt("Hi, what's your name?");

=head2 File Test operators

    -e
    -f Do not exist in Perl 6 see :e, :f

    -M Does not exist in Perl 6. See C<modified>
    -A Does not exist in Perl 6. See C<accessed>
    -C Does not exist in Perl 6. See C<changed>

    :e Exists
    :d Is a directory
    :f Is a file
    :l Is symbolic link
    :r Readable
    :w Writable
    :x Executable
    :s size
    :z Is size zero?

Usage:

If you have a string - a path to something in the filestem:

    if "path/to/file".IO ~~ :e {
        say 'file exists';
	}

    my $file = "path/to/file";
    if $file.IO ~~ :e {
        say 'file exists';
    }

If you already have an IO object in $file, either by creating yourself,
or be getting it from another subroutine, such as C<dir>,
you can write this:

    my $file = "path/to/file".IO;
    if $file ~~ :e {
        say 'file exists';
    }

There are also 3 methods for fetching the 3 timestamps of a file (indode),
on Operating Systems where these are available:

=head2 modified

timestamp when the file was last modified.

    "path/to/file".IO.modified()

=head2 accessed

timestamp when the file was lasy accessed.

    "path/to/file".IO.accessed()

=head2 changed

timestamp when the inode was last changed.

    "path/to/file".IO.changed()

=end pod

