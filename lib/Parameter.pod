=begin pod

=TITLE class Parameter

    class Parameter { }

Represents a parameter, for purpose of introspection.

=head1 Methods

=head2 name

Returns the variable name.

=head2 constraints

Returns additional constraints on the parameter (usually as an
C<all>-Junction).

=head2 type

Returns the nominal type constraint of the paramter.

=head2 named

Returns C<True> if it's a named parameter.

=head2 named_names

Returns a list of names/aliases for this parameter.

=head2 positional

Returns C<True> if the parameter is positional.

=head2 slurpy

Returns C<True> for slurpy parameters.

=head2 optional

Returns C<True> for optional parameters.

=head2 parcel

Returns C<True> for parcel parameters.

    sub f(\$parcel, $non-parcel) { }

=head2 capture

Returns C<True> for parameters that capture the rest of the argument list.

    sub f(\capture) { }

=head2 rw

Returns C<True> for C<is rw> parameters.

=head2 copy

Returns C<True> for C<is copy> parameters.

=head2 readonly

Returns C<True> for read-only parameters (the default).

=head2 invocant

Returns C<True> if the parameter is the invocant parameter.

=head2 default

Returns a closure that upon invocation returns the default value for
this parameter, or C<Any> if no default was provided.

=head2 type_captures

Returns a list of variable names of type captures associated with this
parameter.

    sub a(::T ::U $x) { }
    say &a.signature.params[0].type_captures;   # T U

=end pod
