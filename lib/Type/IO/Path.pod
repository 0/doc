=begin pod

=TITLE class IO::Path

    class IO::Path is Cool does IO::FileTestable { }

Built-in class for file and directory paths.

Conceptually, an C<IO::Path> object consists of a volume (think C<C:> on
windows), a directory, and a basename.

C<IO::Path> supports both purely textual operations, and operations that
access the file system.

The behavior of C<IO::Path> is dependent on the operating system it runs on;
to get reproducible behavior across operating systems, you can use one of its
subclasses instead: L<IO::Path::Unix>, L<IO::Path::Win32>,
L<IO::Path::Cygwin>, L<IO::Path::QNX>.

The rest of this document silently assumes Unix semantics in its examples,
unless when stated otherwise.

=for TODO

document the following methods: is-absolute, is-relative, absolute,
relative, parent, child, copy, chmod, contents

=end for

=head1 Methods

=head2 method new

    multi method new(Str:D $path)
    multi method new(:$basename!, :$directory = '.', :$volume = '')

Creates a new IO::Path object from a path string (which is being parsed for
volume, directory and basename), or from volumen, directory and basename
passed as named arguments.

=head2 method basename

    method basename(IO::Path:D)

Returns the basename part of the path object. That is, it returns the name of
the file relative to to its directory.

    say IO::Path.new("/etc/passwd").basename;   # passwd

=head2 method directory

    method directory(IO::Path:D)

Returns the directory portion of the path object. That is, it returns the path
excluding the volume and the base name.

    say IO::Path.new("/etc/passwd").directory;  # /etc

=head2 method volume

    method volume(IO::Path:D)

Returns the volume portion of the path object. On Unix system, this is always
the empty string.

    say IO::Path::Win32.new("C:\\Windows\\registry.ini").volume;    # C:

=head2 method parts

    method parts(IO::Path:D) returns Hash

Returns a hash with the keys C<directory>, C<path> and C<volume>, and as
values the return values of the methods with the same names.

    say IO::Path.new("/etc/passwd").parts.perl
    # ("directory" => "/etc", "volume" => "", "basename" => "passwd").hash

=head2 method path

    method path(IO::Path:D:)

Returns the invocant.

=head2 method Str

    method Str(IO::Path:D:)

Returns the full path as a string. If the path object was constructed from a
single string, the method Str will return that string.

=head2 method open

    method open(IO::Path:D: *%opts)

Opens the path as a file; the named options control the mode, and are the same
as the L<open> function accepts.

=head2 method watch

    method watch(IO::Path:D: --> Supply)

Watches the path for modifications. Only implemented in Rakudo with the MoarVM
backend at the moment.

=end POD
