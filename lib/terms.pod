=begin pod

=TITLE Terms

Most syntactic constructs in Perl 6 can be categorized in I<terms> and
L<operators|/language/operators>.

Here you can find an overview of different kinds of terms.

=head1 Literals

=head2 Int

    42
    12_300_00
    :16<DEAD_BEEF>

L<Int> literals consist of digits, and can contain underscores
between any two digits.

To specify a base other than ten, use the colonpair form C<< :radix<number> >>.

=head2 Rat

    12.34
    1_200.345_678

L<Rat> (rational numbers) literals contain two integer parts joined by a dot.

Note that trailing dots are not allowed, so you have to write C<1.0> instead
of C<1.> (this rule is important because there are infix operators starting
with a dot, for example the C<..> L<Range> operator).

=head2 Num

    12.3e-32
    3e8

L<Num> (floating point numbers) literals consist of L<Rat> or L<Int> literals
followed by an C<e> and a (possibly negative) exponent. C<3e8> constructs a
L<Num> with value C<3 * 10**8>.

=head2 Str

    'a string'
    'I\'m escaped!'
    "I don't need to be"
    "\"But I still can be,\" he said."
    q|Other delimters can be used too!|

String literals are most often created with C<'> or C<">, but strings
are actually a powerful sub-language of Perl 6. See the section on
quoting constructs below.

=head2 Regex

    / match some text /
    rx/slurp \s rest (.*) $/

These forms produce regex literals. See the section on quoting
constructs below as well as L<the documentation on regexes|regexes>.

=head2 Pair

    a => 1
    'a' => 'b'
    :identifier
    :!identifier
    :identifier<value>
    :identifier<value1 value2>
    :identifier($value)
    :identifier['val1', 'val2']
    :identifier{key1 => 'val1', key2 => 'value2'}
    :$item
    :@array
    :%hash
    :&callable

L<Pair> objects can be created either with C<< infix:«=>» >> (which
auto-quotes the left-hand side if it is an identifier), or with the various
colonpair forms. Those always start with a colon, and then are followed either
by an identifier or the name of an already existing variable (whose name sans
the sigil is used as the key, and value of the variable is used as the value
of the pair).

In the identifier form a colonpair, the optional value can be any circumfix.
If it is left blank, the value is C<Bool::True>. The value of the
C<:!identifier> form is C<Bool::False>.

If used in an argument list, all of these forms count as named arguments, with
the exception of C<< 'quoted string' => $value >>.

=head2 Parcel

    ()
    1, 2, 3
    <a b c>
    «a b c»
    qw/a b c/

L<Parcel> literals are: the empty pair of parens C<()>, a comma-separated
list, or several quoting constructs

=head1 Quoting constructs

=head2 The Q Lang

Strings are usual represented in Perl 6 using some form of quoting
construct. The most minimalistic of these is C<Q>, usable via the
shortcut C<｢…｣>, or via C<Q> followed by any pair of delimiters
surrounding your text. Most of the time, though, the least you'll need
is C<'…'> or C<"…">, described in more detail in the next sections.

=head Literal strings: Q

    Q[A literal string]
    ｢More plainly.｣
    Q ^Almost any non-word character can be a delimiter!^

Delimiters can nested, but in the plain C<Q> form, backslash escapes
aren't allowed.  In other words, basic C<Q> strings are as literal as
possible.

    Q<Make sure you <match> opening and closing delimiters>
    Q{This is still a closing brace → \}

The other quote forms add on to this basic functionality:

=head3 Escaping: :q

    'Very plain'
    q[This back\slash stays]
    q[This back\\slash stays] # Identical output
    Q :q $ There're no backslashes here, only lots of \$\$\$! $
    '(Just kidding. There\'s no money in that string)' 

The C<:q> form allows for escaping characters that would otherwise end
the string using a backslash. The backslash itself can be escaped, too,
as in the third example above. The usual form is C<'…'> or C<q> followed
by a delimiter, but it's also available as an adverb on C<Q>, as in the
fourth example above.

=head3 Interpolation: :qq

TODO

=head3 Word quoting: :qw

TODO

=head3 Shell quoting: :qqw

TODO

=head3 Heredocs: :to

TODO

=head2 Regexes

TODO -- or just point to regexes.pod?

=head1 Identifier terms

There are built-in identifier terms in Perl 6, which are listed below.
In addition one can add new identifier terms with the syntax

    sub term:<fourty-two> { 42 };
    say fourty-two

or as constants

    constant forty-two = 42;
    say fourty-two

=head2 self

Inside a method, C<self> refers to the invocant (i.e. the object the method
was called on). If used in a context where it doesn't make sense, a
compile-time exception of type L<X::Syntax::NoSelf> is thrown.

=head2 now

Returns an L<Instant> object representing the current time.

=head2 rand

Returns a pseudo-random L<Num> in the range C<0..^1>.

=head2 pi

Returns the number C<pi>, i.e. the ratio between circumference and diameter of
a circle.

=head2 e

Returns Euler's number

=head2 i

Returns the imaginary unit (for L<Complex> numbers).

=head1 Variables

Variables are discussed in L<variable language docs |/language/variables>.

=end pod
