=begin pod

=head1 List

    my class List is Iterable does Positional { .. }

C<List> stores items sequentially and potentially lazily.

=head2 Methods

=head3  join

    multi sub    join(Str:D $separator, *@list) returns Str:D
    multi method join(List:D: Str:D $separator) returns Str:D

Treats the elements of the list as strings, interleaves them with
C<$separator> and concatenates everything into a single string.

Example:

    join ', ', <a b c>;     # 'a, b, c'

=head2 map

    multi sub    map(&code, *@elems) returns List:D
    multi method map(List:D:, &code) returns List:D

Invokes C<&code> for each element and gathers the return values in another
list and returns it. This happens lazily, ie C<&code> is only invoked when
the return values are accessed.

=head2 grep

    multi sub    grep(Mu $matcher, *@elems) returns List:D
    multi method grep(List:D:, Mu $matcher) returns List:D

Returns a lazy list of elements against which C<$matcher> smart-matches.
The elements are returned in the order in which they appear in the original
list.

=end pod
