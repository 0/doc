=begin pod

=head1 List

    my class List is Iterable does Positional { .. }

C<List> stores items sequentially and potentially lazily.

Indexes into lists and arrays start at 0 by default.

You cannot assign to list elements. Use Arrays for that use
case instead.


=head2 Items, Flattening and Sigils

In Perl 6, assigning a C<List> to a scalar variable does not lose
information. The difference is that iteration generally treats a
list (or any other list-like object, like a C<Parcel> or an C<Array>)
inside a scalar as a single element.

    my @a = 1, 2, 3;
    for @a { }      # three iterations

    my $s = @a;
    for $s { }      # one iteration
    for @a.item { } # one iteration
    for $s.list { } # three iterations

Combining lists or arrays that are not inclosed into an item container
generally flattens.

    my @a = 1, 2, 3;
    my @flat   = @a, @a;           # six elements
    my @nested = @a.item, @a.item; # two elemnts

C<.item> can often be written as C<$( ... )>, and on an array variable
even as C<$@a>.

=head2 Methods

=head3 elems

    multi sub    elems(*@list)  returns Int:D
    multi method elems(List:D:) returns Int:D

Returns the number of elements in the list

=head3 end

    multi sub    end(*@list)  returns Int:D
    multi method end(List:D:) returns Int:D

Returns the index of the last element

=head3 keys

    multi sub    keys(*@list)  returns List:D
    multi method keys(List:D:) returns List:D

Returns a list of indexes into the list

=head3 values

    multi sub    values(*@list)  returns List:D
    multi method values(List:D:) returns List:D

Returns a copy of the list.

=head3 kv

    multi sub    kv(*@list)  returns List:D
    multi method kv(List:D:) returns List:D

Returns a list of indexes and values interleaved. For example

    <a b c>.kv

Returns

    0, 'a', 1, 'b', 2, 'c'


=head3  join

    multi sub    join(Str:D $separator, *@list) returns Str:D
    multi method join(List:D: Str:D $separator) returns Str:D

Treats the elements of the list as strings, interleaves them with
C<$separator> and concatenates everything into a single string.

Example:

    join ', ', <a b c>;     # 'a, b, c'

=head3 map

    multi sub    map(&code, *@elems) returns List:D
    multi method map(List:D:, &code) returns List:D

Invokes C<&code> for each element and gathers the return values in another
list and returns it. This happens lazily, ie C<&code> is only invoked when
the return values are accessed.

=head3 grep

    multi sub    grep(Mu $matcher, *@elems) returns List:D
    multi method grep(List:D:  Mu $matcher) returns List:D

Returns a lazy list of elements against which C<$matcher> smart-matches.
The elements are returned in the order in which they appear in the original
list.

=head3 first

    multi sub    first(Mu $matcher, *@elems)
    multi method first(List:D:  Mu $matcher)

Returns the first item of the list which smart-matches against C<$matcher>.

=head3 classify

    multi sub    classify(&mapper, *@values) returns Hash:D
    multi method classify(List:D: &mapper)   returns Hash:D

C<classify> transforms a list or array of values into a hash
representing the classification of those values according to a mapper;
each hash key represents the classification for one or more of the
incoming list values, and the corresponding hash value contains
an array of those list values classified by the mapper into the category
of the associated key.  For example:

  my @list = (1, 2, 3, 4);
  my %h = classify { $_ % 2 ?? 'odd' !! 'even' }, @list;

Creates the hash C<< { odd => [1, 3], even => [2, 4] } >> in C<%h>.

=head3 Str

    multi method Str(List:D:) returns Str:D

Same as C<.join(' ')>.

=head3 Int

    multi method Int(List:D:) return Int:D

Same as C<.elems>.

=end pod
