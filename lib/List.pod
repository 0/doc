=begin pod

=head1 List

    my class List is Iterable does Positional { .. }

C<List> stores items sequentially and potentially lazily.

=head2 Methods

=head3  join

    multi sub    join(Str:D $separator, *@list) returns Str:D
    multi method join(List:D: Str:D $separator) returns Str:D

Treats the elements of the list as strings, interleaves them with
C<$separator> and concatenates everything into a single string.

Example:

    join ', ', <a b c>;     # 'a, b, c'

=head3 map

    multi sub    map(&code, *@elems) returns List:D
    multi method map(List:D:, &code) returns List:D

Invokes C<&code> for each element and gathers the return values in another
list and returns it. This happens lazily, ie C<&code> is only invoked when
the return values are accessed.

=head3 grep

    multi sub    grep(Mu $matcher, *@elems) returns List:D
    multi method grep(List:D:  Mu $matcher) returns List:D

Returns a lazy list of elements against which C<$matcher> smart-matches.
The elements are returned in the order in which they appear in the original
list.

=head3 first

    multi sub    first(Mu $matcher, *@elems)
    multi method first(List:D:  Mu $matcher)

Returns the first item of the list which smart-matches against C<$matcher>.

=head3 classify

    multi sub    classify(&mapper, *@values) returns Hash:D
    multi method classify(List:D: &mapper)   returns Hash:D

C<classify> transforms a list or array of values into a hash
representing the classification of those values according to a mapper;
each hash key represents the classification for one or more of the
incoming list values, and the corresponding hash value contains
an array of those list values classified by the mapper into the category
of the associated key.  For example:

  my @list = (1, 2, 3, 4);
  my %h = classify { $_ % 2 ?? 'odd' !! 'even' }, @list;

Creates the hash C<< { odd => [1, 3], even => [2, 4] } >> in C<%h>.

=end pod
