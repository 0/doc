=begin pod

=TITLE Sets, Bags, and Mixes

=DESCRIPTION Unique collections and weighted lists in Perl 6

Often, one wants to work with lists of values that are unique. While
calling L<C<.uniq>|uniq> on the list repeatedly is certainly an option,
better still is to use a L<B<C<Set>>|Set> or L<B<C<SetHash>>|SetHash>,
whose elements are guaranteed to be unique.

Other times, one wants to keep track of the number of occurances of an
item. One could use a hash E<emdash> or use the built-in L<B<C<Bag>>|Bag> or
L<B<C<BagHash>>|BagHash> types (for integer numbers) or the
L<B<C<Mix>>|Mix> or L<B<C<MixHash>>|MixHash> types (for arbitrary
numbers).

There are also many built-in operators defined on C<Set>s and C<Bag>s,
which this document describes.

=head1 class Set

    class Set does Setty { }

An immutable set of unique values or objects. These values can be
accessed via the C<{ }> postcircumfix, and always have a value of either
C<True> or C<False>. For a mutable set, see L<SetHash>.

=head2 Methods

=head3 total

    method total(Set:D:)

Equivalent to C<elems>, added for consistency with the L<Bag> and L<Mix>
types

=head2 Operators

=head3 sub set

    sub set(*@args --> Set)

Creates a C<Set> from the given C<@args>

=head1 class Bag

    class Bag does Baggy { }

An immutable collection of weighted values. These weights are always
integers, and can be accessed with the C<{ }> postcircumfix. For a
mutable collection of weighted values, see L<BagHash>.

    bag('a', 'b', 'c', 'a', 'd', 'a')<a> === 3

=head2 Operators

=head3 sub bag

    sub bag(*@args --> Bag)

Creates a new C<Bag> from C<@args>.

=head1 class Mix

    class Mix does Mixy { }

An immutable collection of weighted values. The weights are accessable
via the C<{ }> postcircumfix. For a mutable collection, see L<MixHash>.

    # TODO: More useful example
    {a => 1.3, b => 4.8, c => 8}.Mix<b> == 4.8 # True

=head2 Operators

=head3 sub mix

    sub mix(*@args --> Mix)

Creates a new C<Mix> from C<@args>.

=head1 Set/Bag Operators

All of the following infix operators will take most types as their
arguments and coerce them to C<Set>s. In some cases, if a type of an
argument is a L<Bag>, the infix operator will behave in a different but
analogous way to the one described here.

=head2 infix (elem)

    multi sub infix:<(elem)>($a, Any $b --> Bool)
    multi sub infix:<(elem)>($a, Set $b --> Bool)

Returns C<True> if the C<Set> C<$b> contains the C<$a> as an element. If
C<$b> is not a C<Set>, it will be coerced to one.

=head2 infix ∈

    only sub infix:<<"\x2208">>($a, $b --> Bool)

Equivalent to L«#infix (elem)».

=head2 infix ∉

    only sub infix:<<"\x2208">>($a, $b --> Bool)

Equivalent to C<!(elem)>, i.e., returns C<True> if the C<Set> C<$b> does
not contain C<$a>.

=head2 infix (cont)

    multi sub infix:<(cont)>(Any $a, $b --> Bool)
    multi sub infix:<(cont)>(Set $a, $b --> Bool)

Returns C<True> if the C<Set> C<$a> contains C<$b> as an element. If
C<$a> is not a C<Set>, it will be coerced to one.

=head2 infix ∋

    only sub infix:<<"\x220B">>($a, $b --> Bool)

Equivalent to L«#infix (cont)».

=head2 infix ∌

    only sub infix:<<"\x220C">>($a, $b --> Bool)

Equivalent to C<!(cont)>, i.e., returns C<True> if the C<Set> C<$a> does
not contain C<$b>.

=head2 infix (|)

    only sub infix:<(|)>(**@p)

Returns the union of all of its arguments. Unless any of its arguments
are L<Baggy>, this creates a new C<Set> that contains all the elements
its arguments contain.

=head2 infix ∪

    only sub infix:<<"\x222A">>(|p)

Equivalent to L«#infix (V<|>)».

=head2 infix (&)

    only sub infix:<(&)>(**@p)

Returns the intersection of all of its arguments. Unless any of its
arguments are L<Baggy>, this creates a new C<Set> that contains only the
elements that all of its arguments contain.

=head2 infix ∩

    only sub infix:<<"\x2229">>(|p)

Equivalent to L«#infix (&)».

=head2 infix (-)

    only sub infix:<(-)>(**@p)

Unless the first argument is L<Baggy>, returns the C<Set> made up all
the elements the first argument has but the rest don't, i.e., of all the
elements of the first argument, minus the elements from the other
arguments.

=head2 infix ∖

    only sub infix:<<"\x2216">>(|p)

Equivalent to L«#infix (-)».

=head2 infix (^)

    multi sub infix:<(^)>(Any $a, Any $b --> Setty)
    multi sub infix:<(^)>(Set $a, Set $b --> Setty)

Returns the C<Set> made up of all the elements that C<$a> has but C<$b>
doesn't and all the elements C<$b> has but C<$a> doesn't. Equivalent to
C<($a ∖ $b) ∪ ($b ∖ $a)>.

=head2 infix ⊖

    only sub infix:<<"\x2296">>($a, $b --> Setty)

Equivalent to L«#infix (^)»

=head2 infix (<=)

    multi sub infix:<<(<=)>>(Any $a, Any $b --> Bool)
    multi sub infix:<<(<=)>>(Setty $a, Setty $b --> Bool)

Returns C<True> if C<$a> is a subset or is equal to C<$b>, i.e., if all the
elements of C<$a> are elements of C<$b>, and C<$a> is a smaller or equal
sized set than C<$b>.

=head2 infix ⊆

    only sub infix:<<"\x2286">>($a, $b --> Bool)

Equivalent to L«#infix (<=)».

=head2 infix ⊈

    only sub infix:<<"\x2288">>($a, $b --> Bool)

Equivalent to C«!(<=)».

=head2 infix (<)

    multi sub infix:<<(<)>>(Any $a, Any $b --> Bool)
    multi sub infix:<<(<)>>(Setty $a, Setty $b --> Bool)

Returns C<True> if C<$a> is a strict subset of C<$b>, i.e., that all the
elements of C<$a> are elements of C<$b>, but C<$a> is a smaller set than
C<$b>.

=head2 infix ⊂

    only sub infix:<<"\x2282">>($a, $b --> Bool)

Equivalent to L«#infix (<)».

=head2 infix ⊄

    only sub infix:<<"\x2284">>($a, $b --> Bool)

Equivalent to C«!(<)».

=head2 infix (>=)

    multi sub infix:<<(>=)>>(Any $a, Any $b --> Bool)
    multi sub infix:<<(>=)>>(Setty $a, Setty $b --> Bool)

Like L«#infix (<=)» with reversed arguments. Returns C<True> if C<$b>
is a subset of or equal to C<$a>.

=head2 infix ⊇

    only sub infix:<<"\x2287">>($a, $b --> Bool)

Equivalent to L«#infix (>=)».

=head2 infix ⊉

    only sub infix:<<"\x2289">>($a, $b --> Bool)

Equivalent to C«!(>=)».

=head2 infix (>)

    multi sub infix:<<(>)>>(Any $a, Any $b --> Bool)
    multi sub infix:<<(>)>>(Setty $a, Setty $b --> Bool)

Like L«#infix (<)» with reversed arguments. Returns C<True> if C<$b>
is a strict subset of C<$a>.

=head2 infix ⊃

    only sub infix:<<"\x2283">>($a, $b --> Bool)

Equivalent to L«#infix (>)».

=head2 infix ⊅

    only sub infix:<<"\x2285">>($a, $b --> Bool)

Equivalent to C«!(>)».

=end pod
