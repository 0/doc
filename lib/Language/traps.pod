=begin pod

=TITLE Traps to avoid when getting started with Perl 6

When learning a programming language, possibly with the background of being
familiar with another programming language, there are always some things that
can surprise you, and might cost valuable time in debugging and descovery.

This document aims to show common misconceptions

=head1 Objects

=head2 Assigning to attributes

Newcomers often think that, because attributes with accessors are declared as
C<has $.x>, they can assign to C<$.x> inside the class. That's not the case.

For example

    use v6;
    class Point {
        has $.x;
        has $.y;
        method double {
            $.x *= 2;   # WRONG
            $.y *= 2;   # WRONG
            self;
        }
    }

    say Point.new(x => 1, y => -2).double.x

dies with

    Cannot mofify an immutable Int

in the first line marked with C<# WRONG>,
because C<$.x>, short for C<$( self.x )>, is a call to a read-only accessor.

The syntax C<has $.x> is short for something like
C<has $!x; method x() { $!x }>, so the actual attribute is called C<$!x>, and
a read-only accessor method is automatically generated.

So the correct way to write method double is

        method double {
            $!x *= 2;
            $!y *= 2;
            self;
        }

which operates on the attributes directly.

=head2 BUILD prevents automatic attribute initialization from constructor arguments

When you define your own C<BUILD> submethod, you must take care of
initializing all attributes yourself. For example

    use v6;
    class A {
        has $.x;
        has $.y;
        submethod BUILD {
            $!y = 18;
        }
    }

    say A.new(x => 42).x;       # Any

leaves C<$!x> uninitialized, because the custom C<BUILD> doesn't initialize
it. And the custom BUILD

One possible remedy is to explicitly initialize the attribute in C<BUILD>:

        submethod BUILD(:$x) {
            $!y = 18;
            $!x := $x;
        }

which can be shortened to

        submethod BUILD(:$!x) {
            $!y = 18;
        }

Another, more general approach is to leave C<BUILD> alone, and hook into the
C<BUILDALL> mechanism instead:

    use v6;
    class A {
        has $.x;
        has $.y;
        method BUILDALL(|c) {
            nextsame;
            $!y = 18;
        }
    }

    say A.new(x => 42).x;       # 42



=head1 Regexes

=head2 Whitespace in Regexes does not match literally

    $ perl6-e "say 'a b' ~~ /a b/"
    False

Whitespace in regexes is, by default, considered an optional filler without
semantics, just like in the rest of the Perl 6 language.

Ways to match whitespace:

=item C<\s> to match any one whitespace, C<\s+> to match at least one
=item C<' '> (a blank in quotes) to match a single blank
=item C<\t>, C<\n> for specific whitespace (tab, newline)
=item C<\h>, C<\v> for horizontal, vertical whitespace
=item with C<m:s/a b/> or C<m:sigspace/a b/>, the blank in the regexes matches arbitrary whitespace


=end pod
