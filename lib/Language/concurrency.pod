=begin pod

=TITLE Concurrency

=SUBTITLE Concurrency and Asynchronous Programming

In common with most modern programming languages Perl 6 is designed to
L<support concurrency|http://en.wikipedia.org/wiki/Concurrent_computing>
(allowing more than one thing to happen at the same time,) and
asynchronous programming (sometime called event driven or reactive
programming - that is an event or change in some part of a program
may lead to an event or change in some other part of the program
asynchronously to the program flow. )

The aim of the Perl concurrency design is to provide a high-level,
composable, consistent interface regardless of how a virtual machine
may implement it for a particular operating system, through layers of
facilities as described below.

=begin comment

I'm not quite clear which specific features should be included below

hyper-operators, autothreading junctions?

=end comment

Additionally certain Perl features may implicitly operate in am asynchronous
fashion, so in order to ensure predictable interoperation with these features
user code should, where possible, avoid the lower level concurrency APIs
(i.e. L<Thread> and L<Scheduler> ) and use the higher-level interfaces.

=head1 High-level APIs

=head2 Promises

A L<Promise|/type/Promise> (also called I<future> in other programming
environments) encapsulates the result of a computation
that may not have completed or even started at the time the
promise is obtained.  It provides much of the functionality that user code
needs to operate in a concurrent or asynchronous manner.

=begin code
my $p1 = Promise.new;
say $p1.status;         # Planned;
$p1.keep('result');
say $p1.status;         # Kept
say $p1.result;         # result

my $p2 = Promise.new;
$p2.break('oh no');
say $p2.status;         # Broken
say $p2.result;         # dies with "oh no"
=end code

Promises gain much of their power by being composable, for example by
chaining:

    my $promise1 = Promise.new();
    my $promise2 = $promise1.then(
        -> $v { say $v.result; "Second Result"}
    );
    $promise1.keep("First Result");
    say $promise2.result;   # First Result \n Second Result

Here the L<then|/type/Promise#method_then> schedules code to be executed
when the first L<Promise> is kept or broken, itself returning a new
L<Promise> which will be kept
with the result of the code when it is executed (or broken if the code
fails.)  C<keep> changes the status of the promise to C<Kept> setting
the result to the positional argument. C<result> blocks the current
thread of execution until the promise is kept or broken, if it was kept
then it will return the result (that is the value passed to C<keep>, )
or it will throw an exception based on the value passed to C<break>. The 
latter behaviour is illustrated with:

    my $promise1 = Promise.new();
    my $promise2 = $promise1.then(-> $v { say "Handled but : "; say $v.result});
    $promise1.break("First Result");
    try $promise2.result;
    say $promise2.cause;        # Handled but : \n First Result

Here the C<break> will cause the code block of the C<then> to throw an
exception when it calls the C<result> method on the original promise
that was passed as an argument which will subsequently cause the second
promise to be broken, raising an exception in turn when its result
is taken.  The actual L<Exception> object will then be available from
C<cause>. If the promise had not been broken C<cause> would raise a
L<X::Promise::CauseOnlyValidOnBroken> exception.

A L<Promise> can also be scheduled to be automatically kept at a future time:

    my $promise1 = Promise.in(5);
    my $promise2 = $promise1.then(-> $v { say $v.status; 'Second Result' });
    say $promise2.result;

The method C<in> creates a new promise and schedules a new task to call
C<keep> on it no earlier than the supplied number of seconds, returning
the new L<Promise> object. This is almost directly equivalent to calling
C<Scheduler.cue> with a code block that will C<keep> the returned promise.

Possibly the most frequent requirement would be to schedule some code to
be executed as soon as possible and obtain a promise that will be kept
(or broken) when the code completes (or throws an exception,) this is
performed by the method C<start> :

    my $promise = Promise.start({ my $i = 0; for 1 .. 10 { $i += $_ }; $i});
    say $promise.result;

Here the C<result> of the promise returned is the value returned from
the code.  Similarly if the code fails (and the promise is thus broken,)
then C<cause> will be the L<Exception> object that was thrown:

    my $promise = Promise.start({ die "Broken Promise" });
    try $promise.result;
    say $promise.cause;

This is considered to be such a commonly required pattern that it is
provided as subroutines:

    my $result = await start {
                                my $i = 0;
                                for 1 .. 10 {
                                    $i += $_
                                }
                                $i
                        }
    say $result;

C<await> is almost equivalent to calling C<result> on the promise object
returned by C<start> but it will also take a list of promises and return
the result of each:

    my $result = await start({
                                my $i = 0;
                                for 1 .. 10 {
                                    $i += $_
                                }
                                $i
                        }),
                        start({
                                my $i = 0;
                                for 1 .. 10 {
                                    $i -= $_
                                }
                                $i
                        });
    say $result;

In addition to C<await> two methods are provided that will combine a set pf
L<Promise> objects into a new promise: C<allof> which returns a promise that
is kept when all the original promises are kept or broken when one of them
is broken:

    my $promise = Promise.allof(
                                 Promise.in(2),
                                 Promise.in(3)    
                               );

    await $promise;
    say "All done"; # Should be no less than three seconds later

And C<anyof> which returns a new promise that will be kept when any of the
original promises is kept or broken when any of them is broken:

    my $promise = Promise.anyof(
                                  Promise.in(3),
                                  Promise.in(8600)
                               );

    await $promise;
    say "All done"; # Should be about 3 seconds later

unlike C<await> however the results of the original kept promises are not
available without referring to the original, so these are more useful
when the completion or otherwise of the tasks is more important to the
consumer than the actual results, or the results have been collected by
other means.


=head2 Supplies

A L<Supply> is an asynchronous data streaming mechanism that can be
consumed by one or more consumers simultaneously in a manner similar to
"events" in other programming languages and can be seem as enabling
"Event Driven" or reactive designs.

L<Supply> is a role that can be composed into your own types, but will 
frequently be used as a "type punned" class to create standalone objects.

At its simplest a L<Supply> is a message stream that can have multiple
subscribers created with the method C<tap> on to which data items can be
placed with C<emit> :

    my $supply = Supply.new();

    $supply.tap( -> $v { say $v });

    for 1 .. 10 {
        $supply.emit($_);
    }

The C<tap> method returns a L<Tap> object which can be used to obtain
information about the tap and also to turn it off when we are no lomger
interested in the events:

    my $supply = Supply.new;
    my $tap = $supply.tap(-> $v { say $v }, closing => {say "closing"});
    $supply.emit("OK");
    $tap.close; # Will trigger the closing callback
    $supply.emit("Won't trigger the tap");

Calling C<close> on the L<Tap> object (or calling C<close> on the supply
object with the tap object as an argument,) will trigger the callback
specified by C<closing> if present and stop further events being sent to
the tap callback but otherwise leave the supply intact to receive further
events. Calling C<done> on the supply object will similarly call the
C<done> callback that may be specified for any taps but will not prevent any
further events being emitted to the stream, or taps receiving them.

The method C<interval> will return a new supply which will automatically
emit a new event at the specified interval, the data that is emitted will
be an integer starting at 0 that will be incremented for each event. The
following code will output 0 .. 5 :

	my $supply = Supply.interval(2);
	$supply.tap(-> $v { say $v });
	sleep 10;

A second argument can be supplied which will specify a delay in seconds
before the first event is fired. Each tap of a supply created by
C<interval> will have its own sequence starting from 0, as illustrated
by the following:

    my $supply = Supply.interval(2);
    $supply.tap(-> $v { say "First $v" });
    sleep 6;
    $supply.tap(-> $v { say "Second $v"});
    sleep 10;

An existing supply object can be filtered or transformed, using the methods
C<grep> and C<map> respectively, to create a new supply in a manner like
the similarly named list methods: C<grep> returns a supply such that only
those events emitted on the source stream for which the expression provided
to the C<grep> will be enitted:

    my $supply = Supply.new;
    $supply.tap(-> $v { say "Original : $v" });
    my $odd_supply = $supply.grep({ $_ % 2 });
    $odd_supply.tap(-> $v { say "Odd : $v" });
    my $even_supply = $supply.grep({ not $_ % 2 });
    $even_supply.tap(-> $v { say "Even : $v" });
    for 0 .. 10 {
        $supply.emit($_);
    }

C<map> will return a new supply such that for each item emitted to the
original supply a new item which is the result of the expression passed
to the C<map> will be emitted:

     my $supply = Supply.new;
     $supply.tap(-> $v { say "Original : $v" });
     my $half_supply = $supply.map({ $_ / 2 });
     $half_supply.tap(-> $v { say "Half : $v" });
     for 0 .. 10 {
         $supply.emit($_);
     }



=head1 Low-level APIs

=head2 Threads

The lowest level interface for concurrency is provided by L<Thread>. A
thread can be thought of as a piece of code that may eventually be run
on a processor, the arrangement for which is made almost entirely by the
virtual machine and/or operating system. Threads should be considered,
for all intents, largely un-managed and their direct use should be
avoided in user code.

A thread can either be created and then actually run later:

    my $thread = Thread.new(code => { for  1 .. 10  -> $v { say $v }});
    # ...
    $thread.run;

Or can be created and run at a single invocation:

    my $thread = Thread.start({ for  1 .. 10  -> $v { say $v }});

In both cases the completion of the code encapsulated by the L<Thread>
object can be waited on with the C<finish> method which will block until
the thread completes:

    $thread.finish;

Beyond that there are  no further facilities for synchronization or resource
sharing which is largely why it should be emphasised that threads are unlikely
to be useful directly in user code.



=head2 Schedulers

The next level of the concurrency API is that supplied by classes that
provide the interface defined by the role L<Scheduler>.  The intent
of the scheduler interface is to provide a mechanism to determine which
resources to use to run a particular task and when to run it. The majority
of the higher level concurrency APIs are built upon a scheduler and it
may not be necessary for user code to use them at all, although some
methods such as those found in L<Proc::Async>, L<Promise> and L<Supply>
allow you to explicitly supply a scheduler.

The current default global scheduler is available in the variable
C<$*SCHEDULER>.

The primary interface of a scheduler (indeed the only method required
by the L<Scheduler> interface) is the C<cue> method:

     method cue(:&code, Instant :$at, :$in, :$every, :$times = 1; :&catch)

This will schedule the L<Callable> in C<&code> to be executed in the
manner determined by the adverbs (as documented in L<Scheduler>) using
the execution scheme as implemented by the scheduler. For example:

     my $i = 0;
     my $cancellation = $*SCHEDULER.cue({ say $i++}, every => 2 );
     sleep 20;

Assuming that the C<$*SCHEDULER> hasn't been changed from the default,
will print the numbers 0 to 10 approximately (i.e with operating system
scheduling tolerances) every two seconds.  In this case the code will
be scheduled to run until the program ends normally, however the method
returns a L<Cancellation> object which can be used to cancel the scheduled
execution before normal completion:

     my $i = 0;
     my $cancellation = $*SCHEDULER.cue({ say $i++}, every => 2 );
     sleep 10;
     $cancellation.cancel;
     sleep 10;

should only output 0 to 5,

Despite the apparent advantage the L<Scheduler> interface provides over
that of L<Thread> all of functionality is available through higher level
interfaces and it shouldn't be necessary to use a scheduler directly,
except perhaps in the cases mentioned above where a scheduler can be
supplied explicitly to certain methods.

A library may wish to provide an alternative scheduler implementation if
it has special requirements, for instance a UI library may want all code
to be run within a single UI thread, or some custom priority mechanism
may be required, however the implementations provided as standard and
described below should suffice for most user code.

=head3 ThreadPoolScheduler

The L<ThreadPoolScheduler> is the default scheduler, it maintains a pool
of threads that are allocated on demand, creating new ones as necessary up
to maximum number given as a parameter when the scheduler object was created
(the default is 16.)  If the maximum is exceeded then C<cue> may queue the
code until such time as a thread becomes available.

Rakudo allows the maximum number of threads allowed in the default scheduler
to be set by the environment variable C<RAKUDO_MAX_THREADS> at the time
the program is started.

=head3 CurrentThreadScheduler

The L<CurrentThreadScheduler> is a very simple scheduler that will always
schedule code to be run straight away on the current thread. The implication
is that C<cue> on this scheduler will block until the code finishes
execution, limiting its utility to certain special cases such as testing.

=begin comment

I couldn't think of a non-contrived but succinct example for a use-case

=end comment


=begin comment

=head3 tap

=head3 emit

=head2 channels

=end comment



=end pod
