=begin pod

=TITLE Concurrency

=SUBTITLE Concurrency and Asynchronous Programming

In common with most modern programming languages Perl 6 is designed
to support concurrency (allowing more than one thing to happen at the
same time,) and asynchronous programming (sometime called event driven
or reactive programming - that is an event or change in some part of a
program may lead to an event or change in some other part of the program
asynchronously to the program flow. )

The aim of the Perl concurrency design is to provide a consistent interface
regardless of how a virtual may machine may implement it for a particular
operating system, through layers of facilities as described below.

=begin comment

I'm not quite clear which specific features should be included below

hyper-operators, autothreading junctions?

=end comment

Additionally certain Perl features may implicitly operate in am asynchronous
fashion, so in order to ensure predictable interoperation with these features
user code should, where possible, avoid the lower level concurrency APIs 
(i.e. L<Thread> and L<Scheduler> ) and use the higher-level interfaces.

=head2 Threads

The lowest level interface for concurrency is provided by L<Thread>. A
thread can be thought of as a piece of code that may eventually be run
on a processor, the arrangement for which is made almost entirely by the
virtual machine and/or operating system. Threads should be considered,
for all intents, largely un-managed and should be avoided in user code.

A thread can either be created and then actually run later:

    my $thread = Thread.new(code => { for  1 .. 10  -> $v { say $v }});
    # ...
    $thread.run;

Or can be created and run at a single invocation:

    my $thread = Thread.start({ for  1 .. 10  -> $v { say $v }});

In both cases the completion of the code encapsulated by the L<Thread>
object can be waited on with the C<finish> method which will block until
the thread completes:

    $thread.finish;

Beyond that there are  no further facilities for synchronization or resource
sharing which is largely why it should be emphasised that threads are unlikely
to be useful directly in user code.



=head2 Schedulers

=begin comment

=head2 promises

=head3 start

=head3 await

=head2 supplies

=head3 tap

=head3 emit

=head2 channels

=end comment



=end pod
