=begin pod

=TITLE Quoting Constructs

=DESCRIPTION Writing strings, word lists, and regexes in Perl 6

=head1 The Q Lang

Strings are usual represented in Perl 6 code using some form of quoting
construct. The most minimalistic of these is C<Q>, usable via the
shortcut C<｢…｣>, or via C<Q> followed by any pair of delimiters
surrounding your text. Most of the time, though, the most you'll need
is C<'…'> or C<"…">, described in more detail in the next sections.

=head2 Literal strings: Q

    Q[A literal string]
    ｢More plainly.｣
    Q ^Almost any non-word character can be a delimiter!^

Delimiters can nested, but in the plain C<Q> form, backslash escapes
aren't allowed.  In other words, basic C<Q> strings are as literal as
possible.

    Q<Make sure you <match> opening and closing delimiters>
    Q{This is still a closing brace → \}

The other quote forms add on to this basic functionality:

=head2 Escaping: q

    'Very plain'
    q[This back\slash stays]
    q[This back\\slash stays] # Identical output
    Q :q $ There're no backslashes here, only lots of \$\$\$! $
    '(Just kidding. There\'s no money in that string)'
    'No $interpolation {here}!'

The C<q> form allows for escaping characters that would otherwise end
the string using a backslash. The backslash itself can be escaped, too,
as in the third example above. The usual form is C<'…'> or C<q> followed
by a delimiter, but it's also available as an adverb on C<Q>, as in the
fourth example above.

=head2 Interpolation: qq

TODO

=head2 Word quoting: qw

    <a b c> eqv ('a', 'b', 'c')
    qw|! @ # $ % ^ & * \| < > | eqv '! @ # $ % ^ & | < >'.words
    Q:w { [ ] \{ \} } eqv ('[', ']', '{', '}')

The C<:w> form, usually written C«<…>» or C<qw>. It splits up the string into
words (which are, in this context, defined as sequences of non-whitespace
characters separated by whitespace). C<q:w> and C<qw> forms inherit the
interpolation and escape semantics of the C<q> and single quote string
delimiters, C<Qw> and C<Q:w> inherit the non-escaping semantis of the C<Q>
quoter.

=head2 Shell quoting: qqw

TODO

=head2 Heredocs: :to

TODO

=head1 Regexes

TODO -- or just point to regexes.pod?


=end pod
