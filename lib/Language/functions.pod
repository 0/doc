=begin pod

=TITLE Functions

=SUBTITLE Functions and Functional Programming in Perl 6

TODO

=head1 Defining/Creating/Using Functions

TODO

=head2 X<Subroutines|declarator,sub>

To create a function, often all that's needed is to define a
subroutine using the C<sub> declarator:

    sub my-func { say "Look ma, no args!" }
    my-func;

To have the subroutine take arguments, a L<signature|Signature> goes
between the subroutine's name and its body, in parenthesis:

    =for code :allow<B L>
    sub exclaim B<($phrase)> {
        say $phrase L<~> "!!!!"
    }
    exclaim "Howdy, World";

By default, subroutines are L<lexically scoped|my>. That is
C<sub foo {...}> is the same as C<my sub foo {...}> and is only
defined in the current scope.

=begin code :allow<L>
sub escape ($str) {
    L<$_> = $str;
    # Puts a slash before non-alphanumeric characters
    L<s>:g[<-alpha-digit>] = "\\$/";
}

say escape "foo#bar?" # foo\#bar\?

{
    sub escape ($str) {
        $_ = $str;
        # Writes each non-alphanumeric character in its hexadecimal escape
        s:g|<-alpha-digit>| = "\\x[{ $/.base(16) }]";
    }

    say escape "foo#bar?" # foo\x[23]bar\x[3F]
}

# Back to original escape function
say escape "foo#bar?" # foo\#bar\?
=end code

Subroutines don't have to be named; in this case they're called anonymous.

    say sub ($a, $b) { $a ** 2 + $b ** 2 }(3, 4) # 25

But in this case, it's often desirable to use the more succint L<block|Block>
syntax.

=head2 X«Blocks and Lambdas|syntax,->»

Whenever you see something like C«{ $_ + 42 }»,
C«-> $a, $b { $a ** $b }», or C«{ $^text.indent($:spaces) }», that's
L<Block> syntax. It's used after every C<if>, C<for>, C<while>, etc.

    for 1, 2, 3, 4 -> $a, $b {
        say $a ~ $b;
    }

    12
    34

But they can also be used on their own as anonymous blocks of code.

    say { $^a ** 2 + $^b ** 2}(3, 4) # 25

For details about the syntax of blocks, see the documentation for the
L<Block> type.

=head2 Multi-dispatch

TODO
=comment multi, proto, {*}, only

=head2 Signatures

The arguments that a function accepts are described in its I<signature>.

=for code :allow<B>
sub formatB<(Str $s)> { ... }
-> B<$a, $b> { ... }

Details about the syntax and use of signatures can be found in the
L<documentation on the C<Signature> class|Signature>.

=comment capture, destructuring,

=head2 Parameters

TODO
=comment prefix:<|>, pair-chaining, \()

=head1 Functions are First-Class Objects

TODO
=comment e.g. `@list.sort :&as`, closures, lexical subs

=comment return from sub and return from block

=comment method invoke { ... }

=head2 Routines

TODO
=comment Important ones: candidates, wrap, unwrap, assuming, arity, count

=comment link to Routine documentation (?)

=head1 Defining Operators

TODO

=head2 Precedence

TODO
=comment trait-mods, tighter, equiv, etc.

=head1 Trait-mods

TODO
=comment cached, hidden_from_backtrace, pure, export, rw, DEPRECATED

=end pod
