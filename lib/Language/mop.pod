=begin pod

=TITLE Meta-Object Protocol

=SUBTITLE Introspection and the Perl 6 Object System

TODO

=head1 Metamethods

These are introspective macros that resemble method calls.

Note that if you want to call a method by the same name of an object, use
quotes around the method name to call it indirectly:

    class MY-CLASSES-ARE-ALL-CAPS {
        method WHY { "I DON'T KNOW" }
    }
    my $c = MY-CLASSES-ARE-ALL-CAPS.new;
    say $c.WHY      # "(MY-CLASSES-ARE-ALL-CAPS)"
    say $c."WHY"()  # "I DON'T KNOW"

=head2 X<WHAT|syntax,WHAT>

The type object of the type.

=head2 X<WHICH|syntax,WHICH>

The object's identity value.

=head2 X<WHO|syntax,WHO>

The package supporting the object.

=head2 X<WHERE|syntax,WHERE>

The memory address of the object.

=head2 X<HOW|syntax,HOW>

The metaclass object: "Higher Order Workings"

=head2 X<WHY|syntax,WHY>

The attached Pod value.

=head2 X<DEFINITE|syntax,DEFINITE>

The object has a valid concrete representation.

=head2 X<VAR|syntax,VAR>

Returns the underlying C<Scalar> object, if there is one.

The presence of a C<Scalar> object indicates that the object is "itemized".

    .say for (1, 2, 3); # not itemized, so "1\n2\n3\n"
    .say for [1, 2, 3]; # itemized, so "1 2 3\n"
    say (1, 2, 3).VAR ~~ Scalar; # False
    say [1, 2, 3].VAR ~~ Scalar; # True

=end pod
